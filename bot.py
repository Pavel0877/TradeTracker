from telegram.ext import filters
import os
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env —Ñ–∞–π–ª–∞ ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# === –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ===
TEXTS = {
    'ru': {
        'choose_lang': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\n1. Deutsch\n2. English\n3. –†—É—Å—Å–∫–∏–π",
        'welcome': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à —Ç–æ—Ä–≥–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.",
        'connect_ebay': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç eBay: /connect_ebay",
        'connected': "‚úÖ eBay-–∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω!",
        'commands': (
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/report_day ‚Äî –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å\n"
            "/report_week ‚Äî –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é\n"
            "/report_month ‚Äî –û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü\n"
            "/year_report ‚Äî –ì–æ–¥–æ–≤–æ–π –æ—Ç—á—ë—Ç"
        ),
        'not_connected': "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ eBay –∞–∫–∫–∞—É–Ω—Ç: /connect_ebay"
    },
    'en': {
        'choose_lang': "Choose your language:\n1. Deutsch\n2. English\n3. –†—É—Å—Å–∫–∏–π",
        'welcome': "Welcome! I'm your trading assistant.",
        'connect_ebay': "Please connect your eBay account: /connect_ebay",
        'connected': "‚úÖ eBay account successfully connected!",
        'commands': (
            "Available commands:\n"
            "/report_day ‚Äî Daily report\n"
            "/report_week ‚Äî Weekly report\n"
            "/report_month ‚Äî Monthly report\n"
            "/year_report ‚Äî Yearly report"
        ),
        'not_connected': "First connect your eBay account: /connect_ebay"
    },
    'de': {
        'choose_lang': "Sprache w√§hlen:\n1. Deutsch\n2. English\n3. –†—É—Å—Å–∫–∏–π",
        'welcome': "Willkommen! Ich bin Ihr Handelsassistent.",
        'connect_ebay': "Bitte verbinden Sie Ihr eBay-Konto: /connect_ebay",
        'connected': "‚úÖ eBay-Konto erfolgreich verbunden!",
        'commands': (
            "Verf√ºgbare Befehle:\n"
            "/report_day ‚Äî Tagesbericht\n"
            "/report_week ‚Äî Wochenbericht\n"
            "/report_month ‚Äî Monatsbericht\n"
            "/year_report ‚Äî Jahresbericht"
        ),
        'not_connected': "Bitte zuerst eBay verbinden: /connect_ebay"
    }
}

# === –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ñ–∞–π–ª–µ users.json) ===
user_data_file = 'users.json'

def load_user_data():
    try:
        with open(user_data_file, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_data(data):
    with open(user_data_file, 'w') as f:
        json.dump(data, f, indent=4)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    users = load_user_data()

    if user_id not in users:
        users[user_id] = {'lang': 'de', 'connected': False}
        save_user_data(users)

    await update.message.reply_text(TEXTS['de']['choose_lang'])

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ===
async def handle_language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    choice = update.message.text.strip()
    lang_map = {'1': 'de', '2': 'en', '3': 'ru'}
    lang = lang_map.get(choice, 'de')

    users = load_user_data()
    users[user_id]['lang'] = lang
    save_user_data(users)

    await update.message.reply_text(TEXTS[lang]['welcome'])
    await update.message.reply_text(TEXTS[lang]['connect_ebay'])

# === –ö–æ–º–∞–Ω–¥–∞ /connect_ebay ===
async def connect_ebay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    users = load_user_data()
    lang = users[user_id]['lang']

    users[user_id]['connected'] = True
    save_user_data(users)

    await update.message.reply_text(TEXTS[lang]['connected'])
    await update.message.reply_text(TEXTS[lang]['commands'])

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ eBay ===
def is_connected(user_id):
    users = load_user_data()
    return users.get(user_id, {}).get('connected', False)

# === –ü—Ä–∏–º–µ—Ä –æ—Ç—á—ë—Ç–æ–≤ ===
async def report_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    users = load_user_data()
    lang = users[user_id]['lang']

    if not is_connected(user_id):
        await update.message.reply_text(TEXTS[lang]['not_connected'])
        return

    await update.message.reply_text("üìÖ –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å: 123 ‚Ç¨")

async def report_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    users = load_user_data()
    lang = users[user_id]['lang']

    if not is_connected(user_id):
        await update.message.reply_text(TEXTS[lang]['not_connected'])
        return

    await update.message.reply_text("üìÖ –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: 999 ‚Ç¨")

async def report_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    users = load_user_data()
    lang = users[user_id]['lang']

    if not is_connected(user_id):
        await update.message.reply_text(TEXTS[lang]['not_connected'])
        return

    await update.message.reply_text("üìÖ –û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü: 3421 ‚Ç¨")

async def year_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    users = load_user_data()
    lang = users[user_id]['lang']

    if not is_connected(user_id):
        await update.message.reply_text(TEXTS[lang]['not_connected'])
        return

    await update.message.reply_text("üìÖ –ì–æ–¥–æ–≤–æ–π –æ—Ç—á—ë—Ç: 38 000 ‚Ç¨")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^[123]$'), handle_language_choice))
    app.add_handler(CommandHandler("connect_ebay", connect_ebay))
    app.add_handler(CommandHandler("report_day", report_day))
    app.add_handler(CommandHandler("report_week", report_week))
    app.add_handler(CommandHandler("report_month", report_month))
    app.add_handler(CommandHandler("year_report", year_report))

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await app.run_polling()

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == '__main__':
    import asyncio
    asyncio.run(main())